/**
 * 스코프(Scope)
 * - 범위, 영역
 * - 변수를 참조(접근)할 수 있는 유효한 범위
 * - 식별자(변수·함수·클래스 이름)가 유효한 범위
 * - 선언된 위치에 따라 유효 범위가 결정됨
 * - 이름 충돌 방지, 메모리 절약
 *
 * 코드블럭: { }, if() { }, for() { }, function() { } 등…
 * - 지역변수: { 블럭 안의 변수는 블럭 안에서만 유효 }
 *  · 이름 충돌 방지, 메모리 절약
 *  · 그래서 변수는 최대한 필요한 곳에서만 정의를 해야 함
 */

// 예시1
{
  const x = 1;
  {
    const y = 2;
    // 자식블록은 부모블록의 변수를 참조 가능
    console.log(x);
  }
  console.log(x);
  // error crashed, 부모블록에서 자식블록을 참조 불가능
  //   console.log(y);
}

// 예시2
const text = 'global scope'; // 1. 전역변수(글로벌변수), 전역스코프(글로벌스코프)
{
  //   console.log(text);
  const text = 'inside block1'; // 2. 지역변수(로컬변수), 지역스코프(로컬스코프)
  {
    // 외부 블록 모두 참조 가능
    // 식별자명이 같다면 자기자신부터 최근접 상위 블록 순으로 참조
    console.log(text);
  }
}
