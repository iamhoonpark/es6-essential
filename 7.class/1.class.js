/**
 * 1. 생성자함수
 *
 * 1) 생성자 함수
 *  - 객체를 만들 때, 공통적인 구조를 가진 객체가 있다면 생성자 함수를 통해서 손쉽게 객체를 만들 수 있었음
 *  - 생성자 함수는 붕어빵 틀로 비유하면, 객체를 만들어 낼 수 있는 템플릿(양식)으로 예를 들 수 있고
 *  - 객체는 이런 템플릿을 통해서 우리가 데이터를(팥, 슈크림 등) 인자를 통해 주입해서 만들어낸 객체(붕어빵)이라 할 수 있음
 *  - 이렇게 가능한 것이 프로토타입
 *
 * 2) 프로토타입
 *  - 위와 같이 가능한 것이 자바스크립트 언어에서는 프로토타입을 베이스로해서 객체지향 프로그래밍을 지원하기 때문
 *  - 자바스크립트 내부 구현사항은 프로토타입을 이용해서 생성자 함수를 지원
 *  - 결국 객체를 손쉽게 만들기 위해서는 생성자 함수를 이용했었음
 *  - 그런데, 대부분의 객체지향 프로그래밍 언어에서는 프로토타입을 사용하지 않고 클래스 기반으로한 객체지향 프로그래밍을 가능하게 함
 *  - 예전 자바스크립트는 프로토타입을 이용했지만, ES6에 도입이된 클래스를 이용해서 조금 더 쉽게 객체를 생성
 *  - 클래스 기반 java, c#, swfit, kotlin
 *
 *
 *
 * 2. 클래스(Class)
 * - https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/class
 *
 * 1) Syntactic Sugar(문법적 설탕)
 *  - 자바스크립트에서는 내부적으로 프로토타입을 사용
 *  - 즉, 개발자들은 클래스를 이용헤도 자바스크립트에서는 내부적으로 프로토타입을 이용하기 때문에
 *  - 프로토타입을 살짝 감싸고 있는, 문법적으로 개발자들이 조금 더 편리하게 쓸 수 있도록 클래스인 것 처럼 보여지도록 더해진, 가미해진 문법
 *
 * ✔Point
 * · 자바스크립트 언어는 프로토타입을 베이스로 하지만, ES6부터 클래스를 기반으로 객체지향 프로그래밍을 해나갈 수 있음
 * · 프로토타입을 기반으로한 객체지향 프로그래밍 언어는 흔하지 않기 때문에 모던한 개발 세상에서는 객체지향 프로그래밍이라 하면 클래스를 기반으로 해서 많이 다룸
 *
 * 2) 결론
 *  - 클래스란 비슷한 부류의 동일한 속성과 행동들을 가진 객체를 생성할 수 있는 템플릿(청사진, 틀 등)
 *  - 객체지향 프로그래밍(Object-Oriented Programming)
 *    · 클래스나, 생성자 함수를 이용해서 객체지향 프로그래밍을 할 수 있음
 *    · 프로그래밍을 할 때, 그냥 절차적으로 코드를 작성하는 것이 아니라
 *      서로 밀접하게 연관있는 아이들을 객체로 구성해 나가면서
 *      객체끼리 서로 호환 가능할 수 있도록 하는 것
 *   · 최신 자바스크립트에서 클래스를 사용하고 이제 생성자 함수는 사용하지 않음
 *   · 클래스가 프로토타입보다 사용하기 간편
 *
 * 3) 클래스를 통해서 객체를 만들 수 있고, 이렇게 만들어진 객체를 인스턴스(Instance) 라고 함
 *  */
